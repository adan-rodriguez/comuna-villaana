---
const { items } = Astro.props;
---

<ul>
  <script is:inline>
    if (document.currentScript.parentElement.previousElementSibling?.getAttribute("aria-controls")) {
      document.currentScript.parentElement.setAttribute("id", document.currentScript.parentElement.previousElementSibling?.getAttribute("aria-controls"))
      }
    </script>
  {
    items.map((item) => (
      <li>
        {item.links ? (       
            <button class={`dropdown-btn ${Astro.url.pathname === "/" ? "after:content-[url('/chevron-down-white.svg')]" : "after:content-[url('/chevron-down-black.svg')]"}`} aria-expanded="false" aria-controls={item.text.replace(/ /g, "").toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")}>
              {item.text}
            </button>
            <Astro.self items={item.links} />
        ) : (
          <a href={item.href} class="link">
            {item.text}
          </a>
        )}
      </li>
    ))
  }
</ul>

<script>
  document.addEventListener("astro:page-load", () => {
    const $$dropdowns = document.querySelectorAll("li:has(.dropdown-btn)")
    const mq = window.matchMedia("(width >= 768px)");
    
    function handleMouseOver(e) {
      const $btn = e.target.firstElementChild
      $btn.nextElementSibling.classList.add("open")
      $btn.setAttribute("aria-expanded", "true")
    }

    function hideDropdown(dropdown) {
    const $btn = dropdown.firstElementChild
    $btn.nextElementSibling.classList.remove("open")
    $btn.setAttribute("aria-expanded", "false")
  }
    
    function handleMouseLeave(e) {
    hideDropdown(e.target)
  }

  function handleEvents(e) {
    if(e.matches) {
      $$dropdowns.forEach(dropdown => {
        dropdown.addEventListener("mouseenter", handleMouseOver); 
        dropdown.addEventListener("mouseleave", handleMouseLeave)})
    } else {
      $$dropdowns.forEach(dropdown => {
        dropdown.removeEventListener("mouseenter", handleMouseOver);
        dropdown.removeEventListener("mouseleave", handleMouseLeave)
      })
    }

    $$dropdowns.forEach(dropdown => hideDropdown(dropdown))
  }

  mq.addEventListener("change", handleEvents)

  handleEvents(mq)
})
</script>

<style>
  li {
    position: relative;
    
    & > ul {
      display: none;
      opacity: 0;
      transition:
      display 0.3s,
      opacity 0.3s;
      transition-behavior: allow-discrete;
      
      &.open {
        display: block;
        opacity: 1;

        @starting-style {
        opacity: 0;
        }  
      }    
    }

    &:has(ul.open) {
      & > .dropdown-btn::after {
        rotate: 180deg;
      }
    } 
  }

  .dropdown-btn {
    display: block;
    position: relative;
    width: 100%;
    text-align: left;
    cursor: pointer;
    border-bottom: 1px solid gray;
    padding: 1.25rem 1.5rem 0.25rem 0;

    &::after{
      position: absolute;
      right: 0;
      scale: 0.75;
      transition: rotate .3s;
      top: 17px;     
    }
    
    @media (width >= 768px) {
      padding-block: 0.75rem;
      padding-left: 1.5rem;

      &::after {
        top: 9px;
      }
    }
  }
  
  .link {
    display: block;
    border-bottom: 1px solid gray;
    padding: 1.25rem 1.5rem 0.25rem 0;
    transition: background-color 0.3s;
  
    @media (width >= 768px) {
      padding-block: 0.75rem;
      padding-left: 1.5rem;
    }
  }
</style>
