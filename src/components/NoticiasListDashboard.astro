---
import { app } from "../firebase/server";
import { getFirestore } from "firebase-admin/firestore";
import TrashIcon from "./icons/TrashIcon.astro";
import EditIcon from "./icons/EditIcon.astro";
import Spinner from "./Spinner.astro";

interface CreatedAt {
  _seconds: number;
  _nanoseconds: number;
}

interface News {
  id: string;
  title: string;
  imageUrl: string;
  alt: string;
  createdAt: CreatedAt;
}

const db = getFirestore(app);
const newsRef = db.collection("news");
const newsSnapshot = await newsRef.get();
const news = newsSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as News[];

const newsList = news.map((newsItem) => {
  // Convertir el timestamp de Firebase a milisegundos
  const date = new Date(
    newsItem.createdAt._seconds * 1000 +
      newsItem.createdAt._nanoseconds / 1000000
  );

  // Ajustar la fecha a UTC-3 (hora local de Argentina)
  const adjustedDate = new Date(date.getTime() - 3 * 60 * 60 * 1000); // Restar 3 horas para ajustar a UTC-3

  // Formatear la fecha para el tag meta
  const publishedTime = adjustedDate.toISOString().slice(0, -8) + "-03:00";

  // Formatear la fecha para el tag time en formato legible
  const options = {
    year: "numeric",
    month: "long",
    day: "numeric",
    timeZone: "America/Argentina/Buenos_Aires", // Ajustar zona horaria
  };

  const readableTime = new Intl.DateTimeFormat("es-AR", options).format(date);

  return {
    ...newsItem,
    publishedTime,
    readableTime,
  };
});
---

<section>
  {
    newsList.length === 0
      ? "No hay noticias"
      : newsList.map((newsItem) => (
          <article>
            <img src={newsItem.imageUrl} alt={newsItem.alt} loading="lazy" />
            <div>
              <h3>{newsItem.title}</h3>
              {/* <time datetime={newsItem.publishedTime}>{newsItem.readableTime}</time> */}
              <div class="buttons">
                <a href={`/dashboard/editar/${newsItem.id}`}>
                  <EditIcon />
                </a>
                <button data-id={newsItem.id} class="delete-btn">
                  <TrashIcon class="delete-icon" />
                  <Spinner class="delete-spinner" />
                </button>
              </div>
            </div>
          </article>
        ))
  }
</section>

<script>
  const $$deleteButtons = document.querySelectorAll(".delete-btn");

  $$deleteButtons.forEach((btn) =>
    btn.addEventListener("click", async (e) => {
      const $clickedBtn = e.target.closest(".delete-btn");
      const id = $clickedBtn.dataset.id;

      const response = await fetch(`/api/news/${id}`, {
        method: "DELETE",
      });

      $clickedBtn.classList.add("loading");

      if (response.redirected) {
        window.location.assign(response.url);
      }
    })
  );
</script>

<style>
  section {
    display: flex;
    flex-direction: column;
    /* grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); */
    gap: 2rem;
  }

  article {
    display: flex;
    gap: 1rem;

    img {
      width: 10rem;
      aspect-ratio: 4/3;
      border-radius: 0.5rem;
      object-fit: cover;
      aspect-ratio: 3/2;
      transition: scale 0.3s;
    }

    /* time {
      font-size: 0.75rem;
    } */

    h3 {
      font-weight: bold;
    }

    .buttons {
      display: flex;
      gap: 0.5rem;

      a,
      button {
        width: 36px;
        height: 36px;
        display: grid;
        place-content: center;
        border-radius: 4px;
        border: 2px solid;
        border-color: white black black white;

        &:active {
          border-color: black white white black;
          translate: 0 3px;
        }
      }

      .delete-btn {
        .delete-spinner {
          display: none;
        }

        &.loading {
          .delete-icon {
            display: none;
          }

          .delete-spinner {
            display: block;
          }
        }
      }
    }
  }
</style>
