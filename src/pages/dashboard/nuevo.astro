---
export const prerender = false;

import { app } from "../../firebase/server";
import { getAuth } from "firebase-admin/auth";
import DashboardLayout from "./_DashboardLayout.astro";

const auth = getAuth(app);

/* Verificar la sesión actual */
if (!Astro.cookies.has("__session")) {
  return Astro.redirect("/login");
}
const sessionCookie = Astro.cookies.get("__session").value;
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);

if (!user) {
  return Astro.redirect("/login");
}
---

<DashboardLayout>
  <form class="article-form">
    <h1>Nueva noticia</h1>
    <label>
      <span>Título</span>
      <textarea name="title" required></textarea>
    </label>
    <label>
      <span>Entrada</span>
      <textarea name="lead" required></textarea>
    </label>
    <label>
      <span>Imagen</span>
      <input type="file" name="image" required />
    </label>
    <label>
      <span>Alt</span>
      <input name="alt" required />
    </label>
    <div class="editor-container">
      <div id="editor"></div>
    </div>
    <button type="submit">Enviar</button>
  </form>
</DashboardLayout>

<!-- <div class="preview-container">
      <iframe class="preview"></iframe>
    </div> -->

<!-- <script is:inline src="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.js"
></script> -->

<script type="module">
  import "https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.js";

  const $preview = document.querySelector(".preview");
  const $form = document.querySelector(".article-form");
  const $titleInput = $form.querySelector("[name='title']");
  const $leadInput = $form.querySelector("[name='lead']");
  const $imageInput = $form.querySelector("[name='image']");
  const $imageAltTextInput = $form.querySelector("[name='alt']");

  const options = {
    modules: {
      toolbar: [
        // [{ font: [] }],
        [{ size: ["small", false, "large", "huge"] }],
        [{ header: [1, 2, 3, 4, 5, 6, false] }],
        ["bold", "italic", "underline", "strike"],
        ["blockquote", "code-block"],
        ["link", "image", "video", "formula"],
        [{ header: 1 }, { header: 2 }],
        [{ list: "ordered" }, { list: "bullet" }, { list: "check" }],
        [{ script: "sub" }, { script: "super" }],
        [{ indent: "-1" }, { indent: "+1" }],
        [{ direction: "rtl" }],
        [{ color: [] }, { background: [] }],
        [{ align: [] }],
        ["clean"],
      ],
    },
    placeholder: "Escribe el cuerpo de la noticia aquí...",
    theme: "snow",
  };
  const quill = new Quill("#editor", options);

  let title, lead, image, alt, body;

  async function handleSubmit(e) {
    e.preventDefault();

    const formData = new FormData();
    formData.append("title", title);
    formData.append("lead", lead);
    formData.append("image", image);
    formData.append("alt", alt);
    formData.append("body", body);

    const response = await fetch("/api/news", {
      method: "POST",
      body: formData,
    });

    if (response.redirected) {
      window.location.assign(response.url);
    }

    const data = await response.text();
    console.log(data);
  }

  function handleChange(e) {
    e.preventDefault();

    const $changedElem = e.target;
    const { name } = $changedElem;

    switch (name) {
      case "title":
        title = $changedElem.value;
        break;

      case "lead":
        lead = $changedElem.value;
        break;

      case "image":
        image = $changedElem.files[0];
        break;

      case "alt":
        alt = $changedElem.value;
        break;

      default:
        break;
    }
  }

  $form.addEventListener("submit", handleSubmit);
  $titleInput.addEventListener("input", handleChange);
  $leadInput.addEventListener("input", handleChange);
  $imageInput.addEventListener("change", handleChange);
  $imageAltTextInput.addEventListener("input", handleChange);
  quill.on("text-change", () => {
    body = quill.getSemanticHTML();
    $preview.setAttribute("srcdoc", body);
  });
</script>

<style>
  @import url("https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.snow.css");

  form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
    width: 100%;
    max-width: 71ch;
    border: 2px solid;
    border-color: white black black white;
    border-radius: 4px;
    padding: 2rem 1rem;

    h1 {
      font-weight: bold;
    }

    label {
      width: 100%;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;

      input {
        width: 100%;
        padding: 0.5rem;
        border-radius: 4px;
      }

      textarea {
        padding: 0.5rem;
        resize: none;
        border-radius: 4px;
      }
    }

    textarea[name="title"] {
      font-weight: bold;
      font-size: 1.75rem;
    }

    textarea[name="lead"] {
      font-size: 1.25rem;
      min-height: 10rem;
    }

    button {
      display: inline-block;
      padding: 0.5rem 2rem;
      border-radius: 4px;
      border: 2px solid;
      border-color: white black black white;

      &:active {
        border-color: black white white black;
        translate: 0 3px;
      }
    }
  }

  .editor-container {
    background-color: Canvas;
  }

  #editor {
    font-family: "Onest Variable", sans-serif;
    font-size: 16px;
    height: calc(100dvh - 2rem);
    scrollbar-width: thin;
  }

  .preview-container {
    background-color: blue;
    margin-top: 1rem;
  }

  .preview {
    background-color: green;
    width: 100%;
    max-width: 65ch;
    height: calc(100dvh - 2rem);
    display: block;
  }
</style>
